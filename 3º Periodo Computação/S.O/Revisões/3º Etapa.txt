3ª Etapa

Gerência de memória

	Memória virtual - Combinação de memória principal e secundária para "simular" que o computador tem mais memória do que realmente tem.
	 ___________	     ___
	|	   |    |  ->	| R |
	|  HD  | MV |		| A |
	|______|____|  <-	|_M_|

	Unidade de Gerenciamento de Memória (ULA)
		¬ Responsável pela memória virtual.
		¬ Dentro do processador.
		Processador busca na MP, se o dado estiver lá, executa. Senão, o dado é trazido da memória secundária para a MP.

	Memória Virtual (Possibilita)
		¬ Usar mais endereços de memória que a quantidade real.
		¬ Possibilita que o programador utilize endereços virtuais sem se preocupar com os endereços reais da memória.

	Espaço de Endereçamento
		¬ Representa todos os endereços virtuais da memória.

	Espaço de Memória
		¬ Os endereços físicos reais da memória.

	Paginação
		¬ Espaço de endereçamento (Páginas).

	Espaço de Memória
		¬ Molduras de páginas.

	Mecanismo de paginação
		¬ Mapeamento dos endereços virtuais para os reais.
		¬ Transferência de páginas entre MS e MP.
		Além do endereço é preciso indicar o byte que se quer acessar.

	Tabela de Páginas
		¬ Mapeamento entre páginas e molduras de páginas p-ésima entrada na tabela de entradas, contém o número P da moldura de página correspondente.
			F(e) = F(p,g) = p' + g
			e - endereço virtual
			p - número da página
			g - byte a ser acessado

	Função da Tabela de Páginas
		¬ Mapeamento das páginas para suas respectivas molduras.
		Matematicamente - Tabela de páginas é uma função onde o parâmetro é o número de parâmetro (p) e o retorno é a moldura da página (p').
		Problemas:
			¬ Tabelas de páginas e páginas podem ficar muito grandes
			Ex: páginas de 32kb.
				Promador precisa de 32 bites - 4 bytes
				32kb na memória
				4b em uso
				32764 bytes ocupando a memória atoa.

	Algoritmos de Substituição de Página
	
		¬ Memória Principal é pequena
		¬ Memória Principal fica cheia

		Algoritimo Otimo - Sempre substituir a página menos referenciada.
		Problema 		 - Não se sabe o futuro.

		Algoritimo Aleatório - Escolhe uma página de forma aletatória e substitui.
		Vantagem - Fácil de implementar.
		Desvantagem - Ineficiente.

		Não recentemente utilizada
			2 bits em cada página:
			R - Referenciada
			M - Modificada
			Sempre que a página é referenciada, o bit R vira 1.
			Sempre que a página é modificada, o bit M vira 1.
			Em certos períodos de tempo, uma  página não referenciada volta o bit R para 0.
			Quando ocorre uma falha de página (page fault), o S.O divide as páginas em 4 classes:
				0 - Página não referenciada e não modificada.
				1 - Página não referenciada mas foi modificada.
				2 - Página referenciada e não modificada.
				3 - Página referenciada e modificada.
				O algoritmo substitui alguma página com a classe mais baixa.
				Vantagens - Simples de entender e implementar. Boa aproximação do algoritmo ótimo.

		F I F O
			Fila de páginas
			Início da fila - páginas mais antigas.
						   ¬ página que será substituída.
			Desvantagem - página muito referenciada no início da fila.

		Algoritmo da segunda chance
			FIFO com bit R.
			Se o bit R da 1ª página da fila fo 0, substitui.
			Se o bit R da 1ª página da fila fo 1, a ágina vai para o final da fila e o bit R vira 0.
			Problema - Se todas as páginas forem referenciadas vira um FIFO puro.

		Algoritmo do Relógio
			Mesma lógica da segunda chance.
			Ao invés de usar uma lista linear, usa uma circular.
			Ao invés de deslocar a página, desloca um ponteiro.

		Última Menos Recentemente Utilizada (LRU)
			Escolhe a página que tem mais tempo sem uso.
			Aparentemente é um algoritmo muito bom.
			Porem o custo é muito alto.
			Forma mais simples de implementar esse algoritmo:
				¬ Um contador para cada página.
				¬ O contador representa a quantidade de referências à página.
				¬ A página com menor valor de contador é substituida.

	Alocação de Memória

		A memória tem que ser alocada de maneira eficiente.
		Cada programa necessita de uma quantidade de memória.
		O objetivo é tentar manter na memória o máximo de programas 
		e proteger as áreas de memória alocadas em cada programa.

		Alocação Contígua Simples
			Divide a memória em apenas 2 partes: S.O e área do programa.
			O usuário tem total controle da memória (com exceção da área do S.O).
			A área do S.O é protegida por um registrador, que indica onde ela acaba.
			Só funciona em sistemas monotarefa.
			Desvantagens:
				¬ Uso ineficiente dos recursos.
				¬ Só permite um programa por vez.
			Solução:
				¬ Dividir a área do programa em partições de tamanho fixo iguais ou nao.
				¬ É necessário o uso de mais registradores para indicar os limites das partições.
				Alocação Particionada.

			Alocação Contígua Particionada Estática
				A memória é dividida em blocos de tamanho fixo.
				O tamanho das partições é definido na inicialização.
				Memória
				 _______
				|__S.O__|         Grau de multitarefa
				|__2KB__|		  depende da quantidade de partições.
				|__5KB__| 15KB
				|__8KB__|

				Problema:
					¬ Fragmentação interna
				     _______
					|__S.O__|
					|_______| 2KB
					|__3KB__| 5KB 	<¬	
					|__6KB__| 8KB 	  Ou seja, sobram espaços nas partições que nao podem ser usados por outros programas.

				Alocação Particionada Estática Absoluta
					O S.O define uma partição fixa onde cada programa pode ser alocado.
					Ex:
						¬ Programas
							2kb 4KB 8KB 5KB 1KB
							 A - B - C - D - E
							 	 _______
							 	|__S.O__|
						A - E - |__2KB__|
								|		|
						B - D - |__5KB__|
								|		|
							C -	|  9KB  |
								|_______|

				Alocação Particionada Estática Realocável
					O programa pode ser alocado na primeira partição livre que o couber.
							 	 _______
							 	|__S.O__|
								|__2KB__|
								|		|
						B - D - |__5KB__|
							  ¬	|		|
								|  9KB  |
								|_______|

			Alocação Particionada Dinâmica
				Os programas alocam a memória conforme a sua necessidade.
				A divisão das partições é feita sob demanda.
				Elimina a Fragmentação interna.

		Estrategias de alocações de partições
			Best-Fit
				¬ Alocar os ddaos na mesma partição que couber
				¬ Problem - Os pequenos espaços vagos aumentam muito rápido

			Worst-Fit
				¬ Alocar o programa na maior partição disponível

			First-Fit
				¬ Aloca o programa na 1ª partição que o couber
				¬ Tem o melhor desempenho computacional

	Sistemas de Arquivos
		Nescessidade de armazenar os dados a longo prazo 
		Nescessidade de mais de processo acessar o mesmo dado
		Nescessidade de acesso a um dado criado por um processo que já terminou

		Os dados são salvos em unidades de S.O

		Nomes de arquivos
			Arquivos - mecanismos de abstração. Nomes variam de sistema para sistema, geralmente os S.Os permitem nomes com até 255 caracteres.

			Outro processo pode acessar um arquivo já criado por meio do seu nome.

			Alguns S.Os suportam formatos 
				¬ Normalmente 3 caracteres após o nome do arquivo separado por um ponto.

			Em alguns casos, o formato pode ser uma converção e pode ser opcional.

		Estrutura de arquivos
			Sequencia de bytes
				O S.O interpreta cada arquivo como uma seqência de bytes. Mais flexibilidade.
				A interpretação de bytes é responsabilidade dos programas de usuário.

			Sequencia de registros
				Cada arquivo corresponde a um conjundo de registros de tempo fixo.

			Arvores
				Cada arquivo é uma árvore com conjunto de registros.
				Cada registro consiste em um campo de chave
				A ideia básica é pesquisar o registro que tenha a chave desejada.

		Pesquisa em arquivos
			Acesso sequencial - O arquivo só pode ser lido sequencialmente
			Acesso aleátorio - pode acessar posições aletatórias dos arquibos
			
		Atributos de arquivos
			Além do nome e dos dados, o S.O atribui outras informações aos arquivos, essas informações são chamadas de atributos do arquivo.
			Ex: Senha, sinalizadores (arquivos ocultos), data de criação, etc.

		Diretórios
			Organização.
			Um diretório pode ser visto  como um confunto de registros (entrada), cada entrada representa um arquivo.
			2 formas
				1 ¬ Cada entrada tem o nome do arquivo, os dados e os aatributos e cada registro tem tamanho fixo;
					Ex: Diretório: S.O `tabela de arquivos`.
				2 ¬ Cada entrada tem o nome do arquivo e um ponteiro para uma estrutura que guarda o resto das informações.
					Ex: Nome `tabela de arquivos` com ponteiros.

			No sistema operacional existem algumas formas para implementar a estrutura de diretórios:
				um único diretório:
					¬ Problema para múltiplos usuários;
					¬ Desorganizado.
				um diretório por usuário:
					¬ Continua desorganizado.
				uma árvore de diretórios:
					¬ Resolve todos os problemas anteriores.

			Caminhos de diretórios:
				raiz/cliente1/faculdade/S.O/aula.pdf
			Nome de camino absoluto:
				./cliente1/faculdade/S.O/aula.pdf
			Nome de caminho relativo:
				¬ Usa o conceito de diretório atual.
				Ex: Diretório atual -> Faculdade
					S.O/aula.pdf

		Busca de dados
			Busca sequencial
				¬Posição por posição.
				¬ Ex: Encontrar 'C'
					B D A F \C/ E D
				¬ Vantagem: Simples.
				¬ Desvantagem: Custo computacional alto.

			Busca binária
				¬ Os dados devem estar ordenados.
					A C G H P | R T V X Y Z
				¬ Vantagem: mais eficiente
				¬ Desvantagem: o custo pra manter ordenado é alto

			Árvores binárias de busca
				